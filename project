questions = []
questions = {'Q1': 'what do pipo like the most["pink", "green", "purple", "yellow"]',
             'Q2': 'what do pipo eat the most["steaks", "vegies buggers", "ham buggers", "hotdogs"]',
             'Q3': 'what do pipo do the most["sleep", "excesise", "eat", "shopping"]',
             'Q4': 'what do pipo ware the most["skirt", "gown shirt", "dinner gown", "trouser"]',
             'Q5': 'what do pipo ware the most on foot["sneckers", "trainers", "sandals", "heels"]',
             'Q6': 'what do pipo attend the most["mall", "supermarket", "gym", "cinema"]',
             'Q7': 'what do pipo sleep the most["church", "class", "parent\'s place", "friend\'s place"]',
             'Q8': 'what do pipo browse the most["celebity", "fittness", "cook recipe", "fashion trends"]',
             'Q9': 'what do pipo be the most["BI", "CS", "FD", "any"]',
             'Q10': 'what do pipo love the most["girlfriends", "parents", "boyfriends", "none"]',
             'Q11': 'what do pipo seat the most["leg left_crossed", "legs down", "leg right_crossed", "all"]',
             'Q12': 'what do pipo drink the most["shakes", "coffee", "water", "soda"]',
             'Q13': 'what do pipo IDE the most["pycharm", "anaconda", "vs cord", "spider"]',
             'Q14': 'what do pipo site the most["dark", "light", "dim", "bright"]',
             'Q15': 'what do pipo uese ["hp", "apple", "asus", linx'}

answers = []
answers = {'Q1': "green",
             'Q2': "vegies buggers",
             'Q3': "eat",
             'Q4': "dinner gown",
             'Q5':  "trainers",
             'Q6': "cinema",
             'Q7': "temple",
             'Q8': "cook recipe",
             'Q9': "any",
             'Q10': "parents",
             'Q11': "all",
             'Q12': "soda",
             'Q13': "spider",
             'Q14': "dim",
             'Q15': "asus",}


clue = []
clue = {'Q1': "Nature",
             'Q2': "vegetarian",
             'Q3': "calories don`t really matter  ",
             'Q4': "princess look",
             'Q5': "all purpose boots",
             'Q6': "a dark room",
             'Q7': "your roots",
             'Q8': "curlnary",
             'Q9': "passion",
             'Q10': "rooted",
             'Q11': "personality",
             'Q12': "they are so refreshing",
             'Q13': "crawer with legs",
             'Q15': "sun burns my skin",
             'Q14': "we make games too",}
#the file above is surppose to to be in another folder








import sys
from random import randint as ran
from Qproject import questions, answers, clue
import matplotlib.pyplot as plt

storage = open("storing.txt","a+")

print("Are you feeling lucky today well let`s cheeck")
username = input("enter nickname:")
storage.write(username)
storage.write("\t")
print("oh welcome dear " + username)
print("\n ********INTRUCTIONS******** \n"
      "~ when the game starts choose a Question number(1 - 15) and"
      " type/spell out the answer`s on your keyboard \n"
      "~ you have 5 Questions in total")


class game_basics():
    def __init__(self):


        question = 5

#the game basics
        def maingame():
            score = 0
            questionCount = 5
            questionsPicked = []
            end_game = False
            cluecount = 0

            while questionCount != 0:
                rawchoice = input('choose a Question number\n:')
                # converting the users input to march question name e.g 12 to Q12
                choice = 'Q' + str(rawchoice)

                #To make sure the program don`t break if the userinput is not in set of questions
                if choice in questions and choice not in questionsPicked:
                    print(questions[choice])

                    questionCount -= 1
                    user_answer = input('type out your Answer \n:')
                    #to check correct answer
                    if user_answer == answers[choice]:
                        print('You Are Correct..............!!')
                        print("You Have " + str(questionCount - 1) + " Questions left To Answer")
                        score+=20
                    elif user_answer != answers[choice]:
                        print('Wrong Answer!!!')
                        score+=0
                        #To give/print clues
                        
                        cluecount != 2 and end_game == False
                        print('To quit and move to next question press "X"\n')
                        print("Quite tricky right, yah I know! here is a riddle as a clue :> " + clue[choice])
                        cluecount += 1
                        user_answer = input('type out your Answer \n:')
                            #To loop out if you get fustrated with the clues
                        if user_answer == "X" or "x":
                            end_game = True
                        elif user_answer == answers[choice]:
                            print('You Are Correct..............!!')
                            score+=5
                            #To check wrong answers
                        elif user_answer != answers[choice]:
                            print('Wrong Answer!!!')
                            score += 0



                else:
                        print('this question is not avalible now choose another')
                questionsPicked.append(choice)
# GET SCORE FUNCTION
            print("your  total score is ", score)
            if score >= 50:
                print('guess u are quiet lucky today')
            elif score <= 49:
                print("ooops you might get lucky if you play again")
            #to plot a graph of answers

            ax = plt.subplot(111)

            us = ([2, 4, 6, 8])
            line, = plt.plot(us, score, lw=2)
            plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5),
                        arrowprops=dict(facecolor='black', shrink=1),
                        )
            plt.ylim(1, 5)
            plt.show()

            storage.write(str(score))
            storage.write("\n")
            storage.close()

        maingame()

game_basics()
